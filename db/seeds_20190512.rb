Category.create!([
  {name: "JavaScript"},
  {name: "Rails"},
  {name: "jQuery"}
])
Micropost.create!([
  {content: "マウスカーソルが重なったときに\r\n文字色を変更します（jQuery）", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {\r\n  background: gray;\r\n}\r\n#btn {\r\n  cursor: pointer;\r\n  width: 100px;\r\n  background: #3498db;\r\n  border-radius: 5px;\r\n  color: #fff;\r\n  text-align: center;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div id=\"btn\";  border=\"5px\">Test</div>\r\n\r\n  <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n  <script>\r\n  (function() {\r\n\t'use strict';\r\n\r\n    $('#btn').on('mouseover', test);\r\n    function test(e){\r\n      $('#btn').css('color' , 'tomato');\r\n    }\r\n\r\n    $('#btn').on('mouseout', test2);\r\n    function test2(e){\r\n      $('#btn').css('color' , '#fff');\r\n    }\r\n  })();\r\n  </script>\r\n</body>\r\n</html>", title: "文字色を変更（color、css、mouseover、mouseout）", category_id: 3},
  {content: "【対応】\r\n①dbフォルダ内の、「development.sqlite3」ファイルを削除\r\n②以下実行→うまくできた\r\n>|\r\nrails db:create db:migrate\r\n|<\r\n\r\n【事象】\r\nrails db:migrate:reset実施したところ、以下のエラー\r\n>|\r\nPermission denied @ unlink_internal - C:/Users/USER/xxx/db/development.sqlite3\r\nCouldn't drop database 'db/development.sqlite3'\r\nrails aborted!\r\nErrno::EACCES: Permission denied @ unlink_internal - C:/Users/USER/xxx/db/development.sqlite3\r\nbin/rails:4:in `require'\r\nbin/rails:4:in `<main>'\r\nTasks: TOP => db:drop:_unsafe\r\n(See full trace by running task with --trace)\r\n|<\r\n", user_id: 1, code: "", title: "【エラー】[Windows環境]Couldn't drop database 'db/development.sqlite3'（rails db:migrate:reset）", category_id: 2},
  {content: "【対応】\r\n①Gemfile.lockを削除\r\n②bundle update\r\n③再度、rails db:seedしたらうまくいった\r\n\r\n【事象】\r\ngem 'faker', '1.7.3'を記述して、rails db:seedしたところ、以下のエラー\r\n>|\r\nBundler could not find compatible versions for gem \"i18n\":\r\n  In snapshot (Gemfile.lock):\r\n    i18n (= 1.6.0)\r\n\r\n  In Gemfile:\r\n    rails (~> 5.1.6) x64-mingw32 was resolved to 5.1.7, which depends on\r\n      activesupport (= 5.1.7) x64-mingw32 was resolved to 5.1.7, which depends on\r\n        i18n (>= 0.7, < 2) x64-mingw32\r\n\r\n    faker (= 1.7.3) x64-mingw32 was resolved to 1.7.3, which depends on\r\n      i18n (~> 0.5) x64-mingw32\r\n\r\nRunning `bundle update` will rebuild your snapshot from scratch, using only\r\nthe gems in your Gemfile, which may resolve the conflict.\r\n|<\r\n", user_id: 1, code: "", title: "【エラー】Bundler could not find compatible versions for gem \"i18n\":", category_id: 2},
  {content: "【エラー】Migrations are pending. To resolve this issue, run:\r\nbin/rails db:migrate RAILS_ENV=test\r\n（rails testで発生。rails s は可能）\r\n\r\n【対応】\r\n>|\r\nrails db:migrate RAILS_ENV=test\r\n|<\r\n\r\nエラーメッセージのとおり、\r\n上記を実行したところ、rails testできました\r\n※Migrationsが未解決なので\r\n　migrateしてねってことですね\r\n（英語で書いてあるとおり。。）\r\n", user_id: 1, code: "", title: "【エラー】Migrations are pending. To resolve this issue, run: ", category_id: 2},
  {content: "【対応】\r\nGemfileに以下追加、bundle update\r\n>|\r\ngem 'bcrypt',         '3.1.12'\r\n|<\r\n>|\r\nbundle update bcrypt\r\n|<", user_id: 1, code: "", title: "【エラー】cannot load such file -- bcrypt", category_id: 2},
  {content: "【対応】\r\nユーティリティのファイル名がクラス名・モジュール名と一致しているかどうか確認を。\r\n\r\n→自分の場合、名前付きルートに変更したら発生\r\n　大文字と小文字が混在していたので小文字に統一したらうまくいきました(^^\r\n", user_id: 1, code: "", title: "【エラー】uninitialized constant ActionView::CompiledTemplates::CommonUtil", category_id: 2},
  {content: "【対応】\r\n以下、Gemfileに追加して、bundle update\r\n>|\r\ngem 'coffee-script-source', '1.8.0'\r\n|<\r\n>|\r\nbundle update coffee-script-source\r\n|<\r\n", user_id: 1, code: "", title: "【エラー】ExecJS::ProgramError: TypeError: オブジェクトでサポートされていないプロパティまたはメソッドです。（TypeError: Object doesn't support this property or method）", category_id: 2},
  {content: "【対応】\r\nviewフォルダに  xxx.html.erb（テンプレート）ファイルを作成", user_id: 1, code: "", title: "【エラー】ActionController::UnkonwnFormat .. missing a template", category_id: 2},
  {content: "**対応\r\n対象のgemをupdate\r\n>||\r\nbundle update bootsnap\r\n:\r\nUsing bootsnap 1.4.4 (was 1.4.3)\r\n:\r\n||<\r\n\r\n**事象\r\nrails sコマンドを入力したところ以下のエラー発生\r\n>||\r\nrails s\r\nCould not find bootsnap-1.4.3 in any of the sources\r\nRun `bundle install` to install missing gems.\r\n||<\r\n\r\n\r\n**原因\r\nGemfile.lock で指定されているgemのバージョンがyank（削除）されてる\r\n", user_id: 1, code: "", title: "【エラー】Could not find xxx in any of the sources  Run `bundle install` to install missing gems.", category_id: 2},
  {content: "ボタンクリックでモーダル画面の表示／非表示の動きを実装します。\r\nテキストボックスに入力した値は連動するようにします。\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#open, #close {\r\n  cursor: pointer;\r\n  width:80px;\r\n  border-radius: 3px;\r\n  background: #3498db;\r\n}\r\n#mask {\r\n  background: rgba(0, 0, 0, 0.4);\r\n  position: fixed;\r\n  top: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n  left: 0;\r\n  z-index: 1;\r\n}\r\n\r\n#modal {\r\n  background: #fff;\r\n  width: 300px;\r\n  padding: 20px;\r\n  border-radius: 4px;\r\n  position: absolute;\r\n  top: 40px;\r\n  left: 0;\r\n  right: 0;\r\n  margin: 0 auto;\r\n  transition: .8s;\r\n  z-index: 2;\r\n}\r\n#modal p {\r\n  line-height: 1.5;\r\n  margin: 0 0 20px;\r\n}\r\n#mask.hidden {\r\n  display: none;\r\n}\r\n#modal.hidden {\r\n  transform: translate(0, -500px);\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <input id=\"text\">\r\n  <div id=\"modal\" class=\"hidden\">\r\n    <input id=\"modalText\">\r\n    <div id=\"close\">Close</div>\r\n  </div>\r\n  <div id=\"open\">Open</div>\r\n  <div id=\"mask\" class=\"hidden\"></div>\r\n\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n    var text  = document.getElementById('text');\r\n    var modalText  = document.getElementById('modalText');\r\n    var open  = document.getElementById('open');\r\n    var close = document.getElementById('close');\r\n    var modal = document.getElementById('modal');\r\n    var mask = document.getElementById('mask');\r\n\r\n    //「Open」ボタンクリック\r\n    open.addEventListener('click', function() {\r\n      modal.className = '';\r\n      mask.className = '';\r\n    });\r\n\r\n    //モーダル画面の閉じるボタンクリック\r\n    close.addEventListener('click', function() {\r\n      modal.className = 'hidden';\r\n      mask.className = 'hidden';\r\n    });\r\n\r\n    //mask（モーダル表示中の黒い画面）クリック ＝ モーダル画面の閉じるボタンクリック\r\n    mask.addEventListener('click', function() {\r\n      close.click();\r\n    });\r\n\r\n    //テキストボックス入力で、値を連動させる\r\n    text.addEventListener('keyup', function() {\r\n       modalText.value= this.value;\r\n    });\r\n    modalText.addEventListener('keyup', function() {\r\n       text.value= this.value;\r\n    });\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "モーダル画面の表示／非表示、および、入力値の連動(className、keyup)", category_id: 1},
  {content: "プログレスバーです\r\n時間経過でバーが減っていきます\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: darkgray;}\r\n.app {\r\n  height: 80px;\r\n  width: 400px;\r\n  padding: 20px;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n}\r\n.progress {\r\n  width: 340px;\r\n  height: 30px;\r\n  background-color: #F5F5F5;\r\n  border-radius: 4px;\r\n  box-shadow: inset 0 1px 2px rgba(0,0,0,.1);\r\n}\r\n.progress-bar {\r\n  height: 100%;\r\n  background-color: #337AB7;\r\n  border-radius: 4px;\r\n}\r\n#retry {\r\n  margin-bottom:5px;\r\n  cursor:pointer;\r\n  border-radius: 2px;\r\n}\r\n</style>\r\n<body>\r\n<div class=\"app\">\r\n  <button id=\"retry\">Retry</button>\r\n  <div id=\"prog-bar\" class=\"progress\">\r\n    <div class=\"progress-bar\"></div>\r\n  </div>\r\n</div>\r\n<script>\r\n(function() {\r\n 'use strict';\r\n\r\n   const bar = document.querySelectorAll('#prog-bar > .progress-bar')[0];\r\n   var p = 100;\r\n   var timerId = setInterval(timer,1);\r\n   function timer() {\r\n     if (0 < p) { p -= 0.1; }\r\n     bar.style.width = p + '%';\r\n   }\r\n   function retry() {\r\n     p = 100;\r\n     bar.style.width = p + '%';\r\n   }\r\n   document.getElementById('retry').addEventListener('click',retry);\r\n  })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "プログレスバー(setInterval、style.width)", category_id: 1},
  {content: "画面をタッチorクリックすると\r\n次の英単語を表示します\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: darkgray;}\r\n#section {margin:0; padding:0;}\r\n#target {background: #f4f4f4; width:500px; height:100px; font-size:3em; text-align:center; margin:0; padding:0;}\r\n</style>\r\n<body>\r\n <div id=\"main\">\r\n   <p id=\"section\">00</p>\r\n   <p id=\"target\">Start (touch/click)</p>\r\n </div>\r\n</body>\r\n</html>\r\n<script>\r\n(function() {\r\n 'use strict';\r\n  const list = [\r\n   {'sec':'01', 'key': 'respect'       },\r\n   {'sec':'01', 'key': 'the will'      },\r\n   {'sec':'01', 'key': 'individual'    },\r\n   {'sec':'02', 'key': 'as long as'    },\r\n   {'sec':'02', 'key': 'reasonable'    }\r\n   ];\r\n\r\n // 順番に表示\r\n    var i = 0;\r\n    function setTarget() {\r\n      document.getElementById('section').textContent = list[i]['sec'];\r\n      document.getElementById('target').textContent  = list[i]['key'];\r\n      i++;\r\n      if (i == list.length) i = 0;\r\n    }\r\n\r\n // ランダムに表示\r\n //   function setTarget() {\r\n //     var index = Math.floor(Math.random() * list.length);\r\n //     document.getElementById('section').textContent = list[index]['sec'];\r\n //     document.getElementById('target').textContent  = list[index]['key'];\r\n //   }\r\n\r\n    var flg = false;\r\n    window.addEventListener('touchstart', function() {\r\n      flg = true;\r\n      setTarget();\r\n    });\r\n    window.addEventListener('click', function() {\r\n      if (flg) {\r\n        flg = false;\r\n      } else {\r\n       setTarget();\r\n      }\r\n    });\r\n\r\n  })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "英単語の暗記用(random、touchstart)", category_id: 1},
  {content: "スライドショーの練習です\r\nマウスオーバーした番号を表示、\r\n表示中の番号にhoverすると拡大します\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: darkgray;}\r\n#main {position:relative;}\r\nnav li {\r\n  padding:0;\r\n  margin:0;\r\n  list-style:none;\r\n  float: left;\r\n  cursor:pointer;\r\n  opacity:0.5;\r\n}\r\nnav li:hover   {opacity: 1;}\r\nnav li.current {opacity: 1;}\r\nnav li + li {margin-left: 3px;}\r\nnav p {width:20px; height: 20px;}\r\np {background: #f4f4f4; border: 1px solid #aaa; text-align:center;}\r\n#target{width:100px; font-size:3em; padding:0; margin:0; transition: 1s;}\r\n#target:hover { transform: scale(1.1);}\r\n\r\n</style>\r\n\r\n<body>\r\n  <div id=\"main\">\r\n     <p id=\"target\">1</p>\r\n  </div>\r\n  <nav id=\"thumbnails\"></nav>\r\n</body>\r\n</html>\r\n\r\n<script>\r\n(function() {\r\n  'use strict';\r\n  var list = ['1','2','3','4'];\r\n\r\n  var currentNum =0;\r\n  var target = document.getElementById('target');\r\n  var thumbnails = document.getElementById('thumbnails');\r\n\r\n  function createThumbnails() {\r\n    for (var i=0; i<list.length ; i++) {\r\n      var li = document.createElement('li');\r\n      li.setAttribute('data-idx', i);\r\n      li.addEventListener('mouseover', function(){\r\n        thumbnails.children[currentNum].className = '';\r\n        target.textContent=this.children[0].textContent;\r\n        currentNum = this.dataset.idx;\r\n        this.className = 'current';\r\n      })\r\n\r\n      var p = document.createElement('p');\r\n      p.textContent = list[i];\r\n\r\n      li.appendChild(p);\r\n      thumbnails.appendChild(li);\r\n    }\r\n  }\r\n  createThumbnails();\r\n  thumbnails.children[currentNum].className = 'current';\r\n})();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "スライドショーの練習 ②(opacity、mouseover、transform: scale)", category_id: 1},
  {content: "スライドショーの練習です\r\nクリックした番号を大きく、かつ、透過度100%で表示します\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: darkgray;}\r\n#main {position:relative;}\r\nnav li {\r\n  padding:0;\r\n  margin:0;\r\n  list-style:none;\r\n  float: left;\r\n  cursor:pointer;\r\n  opacity:0.5;\r\n}\r\nnav li:hover   {opacity: 1;}\r\nnav li.current {opacity: 1;}\r\nnav li + li {margin-left: 3px;}\r\nnav p {width:20px; height: 20px;}\r\np {background: #f4f4f4; border: 1px solid #aaa; text-align:center;}\r\n#target{width:100px; font-size:3em; padding:0; margin:0;}\r\n</style>\r\n\r\n<body>\r\n  <div id=\"main\">\r\n     <p id=\"target\">1</p>\r\n  </div>\r\n  <nav id=\"thumbnails\"></nav>\r\n</body>\r\n</html>\r\n\r\n<script>\r\n(function() {\r\n  'use strict';\r\n  var list = ['1','2','3','4'];\r\n\r\n  var currentNum =0;\r\n  var target = document.getElementById('target');\r\n  var thumbnails = document.getElementById('thumbnails');\r\n\r\n  function createThumbnails() {\r\n    for (var i=0; i<list.length ; i++) {\r\n      var li = document.createElement('li');\r\n      li.setAttribute('data-idx', i);\r\n      li.addEventListener('click', function(){\r\n        thumbnails.children[currentNum].className = '';\r\n        target.textContent=this.children[0].textContent;\r\n        currentNum = this.dataset.idx;\r\n        this.className = 'current';\r\n      })\r\n\r\n      var p = document.createElement('p');\r\n      p.textContent = list[i];\r\n\r\n      li.appendChild(p);\r\n      thumbnails.appendChild(li);\r\n    }\r\n  }\r\n  createThumbnails();\r\n  thumbnails.children[currentNum].className = 'current';\r\n})();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "スライドショーの練習① (opacity)", category_id: 1},
  {content: "チェックボックスのチェックのスタイルを変更する\r\ninputタグはcssで設定できないため、labelタグを使います。\r\n", user_id: 1, code: "<style>\r\n.checkbox-input{ \r\n  display: none; \r\n} \r\n.checkbox-parts{ \r\n  padding-left: 20px; \r\n  position:relative; \r\n  margin-right: 20px; \r\n} \r\n .checkbox-parts::before{ \r\n   content: \"\"; \r\n   display: block; \r\n   position: absolute; \r\n   top: 0; \r\n   left: 0; \r\n   width: 15px; \r\n   height: 15px; \r\n   border: 1px solid #999; \r\n   border-radius: 4px; \r\n } \r\n .checkbox-input:checked + .checkbox-parts{ \r\n   color: tomato; \r\n } \r\n .checkbox-input:checked + .checkbox-parts::after{ \r\n   content: \"\"; \r\n   display: block; \r\n   position: absolute; \r\n   top: -5px; \r\n   left: 5px; \r\n   width: 7px; \r\n   height: 14px; \r\n   transform: rotate(40deg); \r\n   border-bottom: 3px solid tomato; \r\n   border-right: 3px solid tomato; \r\n } \r\n</style>\r\n\r\n<div class=\"checkbox\"> \r\n  <label> \r\n    <input type=\"checkbox\" name=\"checkbox[]\" class=\"checkbox-input\"> \r\n    <span class=\"checkbox-parts\">チェック</span> \r\n  </label>\r\n  <br>\r\n  <input type=\"checkbox\"\">チェック（スタイルなし）\r\n\r\n</div> \r\n", title: "チェックボックスのチェックのスタイルを変更（:checked + xxx ::after）", category_id: 1},
  {content: "アコーディオンメニュー（Accordion Menu）の練習です。\r\n:hoverをつかって、マウスカーソルがあるときに\r\n各リンクが表示するように実装してます\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\n body {background: gray;}\r\n ul{padding-left:0;}\r\n a {text-decoration:none;}\r\n a:hover {text-decoration: underline;}\r\n a + a {margin:20px;}\r\n .subMenu > li {visibility:hidden;}\r\n .head > li {display:inline-block;}\r\n li {list-style: none;}\r\n\r\n .menu:hover + .subMenu > li {visibility:visible;}\r\n .subMenu:hover  li {visibility:visible;}\r\n</style>\r\n\r\n<ul class=\"head\">\r\n  <li><a href=\"#\" class=\"menu\">Menu1</a>\r\n    <ul class=\"subMenu\">\r\n    <li><a href=\"#\">subMenu1</a></li>\r\n    <li><a href=\"#\">subMenu2</a></li>\r\n    </ul>\r\n  </li>\r\n  <li><a href=\"#\" class=\"menu\">Menu2</a>\r\n    <ul class=\"subMenu\">\r\n      <li><a href=\"#\">subMenu11</a><a href=\"#\">subMenu13</a></li>\r\n      <li><a href=\"#\">subMenu12</a><a href=\"#\">subMenu14</a></li>\r\n    </ul>\r\n  </li>\r\n</ul>\r\n</body>\r\n</html>\r\n", title: "アコーディオンメニュー (:hover)", category_id: 1},
  {content: "配列からパンくずリスト（Breadcrumb List）を作成します\r\n（一般的なHTML記述）", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\n body {background: gray;}\r\n.btn  {cursor: pointer;width: 100px;background: #3498db;}\r\n .breadcrumb li {display:inline; list-style: none;}\r\n .breadcrumb li:after {padding: 0 5px; content: '>';}\r\n .breadcrumb li:last-child:after     { content: '';}\r\n .breadcrumb li a       {text-decoration: none;}\r\n .breadcrumb li a:hover {text-decoration: underline;}\r\n</style>\r\n<body>\r\n\r\n<span id=\"btn\" class=\"btn\">Show BreadcrumbList</span>\r\n<ul class=\"breadcrumb\"></ul>\r\n\r\n<script>\r\n (function() {\r\n  'use strict';\r\n  const bread = document.querySelector('.breadcrumb');\r\n  const urlList = [\r\n    { id: 1, title: 'Top', url:'https://tttkkkkk.hatenablog.com/archive' },\r\n    { id: 2, title: 'JS' , url:'https://tttkkkkk.hatenablog.com/archive/category/JS' }\r\n  ];\r\n  \r\n  //Click\r\n  document.querySelector('#btn').addEventListener('click', () => {\r\n    urlList.forEach((xxx) => {\r\n      let li=document.createElement('li');\r\n      li.innerHTML = `<a  href=${xxx.url}> ${xxx.title} </a>`\r\n      bread.appendChild(li);\r\n    });\r\n  });\r\n })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "配列からパンくずリストを作成 (appendChild)", category_id: 1},
  {content: "３秒後に問題の解答を表示、もしくは、\r\nチェックボックスにチェックすると解答を表示します", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\n body {background: gray;}\r\n #box {transition: 0.5s; opacity: 0;}\r\n input:checked + #box  { opacity: 1;}\r\n</style>\r\n\r\n1+1= ? <input type=\"checkbox\" id=\"chk\" />\r\n<div id=\"box\">2</div>\r\n<div id=\"tim\"></div>\r\n\r\n<script>\r\n (function() {\r\n  'use strict';\r\n\r\n   const tim = document.getElementById(\"tim\");\r\n   const chk = document.getElementById(\"chk\");\r\n\r\n   //3000ms = 3s\r\n   const endTime = Date.now() + 3000;\r\n   // 5ms Interval\r\n   const timerId = setInterval(timer,5);\r\n   \r\n   function timer() {\r\n     const nowTime = Date.now();\r\n     const dif = endTime - nowTime;\r\n     const sec = dif / 1000;\r\n     tim.textContent = `${sec}`;\r\n\r\n     if (sec<0 || chk.checked) {\r\n       clearInterval(timerId);\r\n       tim.style.display = \"none\";\r\n       chk.checked = true;\r\n     }\r\n   }\r\n  })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "３秒後に問題の解答を表示するサンプル②（setInterval、style.display、input:checked）", category_id: 1},
  {content: "３秒後に問題の解答を表示するサンプル\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer;width: 100px;background: #3498db;}\r\n</style>\r\n\r\n<span id=\"btn\" class=\"btn\">Click</span>\r\n<p id=\"mon\">1+1 = ?</p>\r\n<p id=\"ans\">1+1 = 2</p>\r\n<p id=\"tim\"></p>\r\n\r\n<script>\r\n (function() {\r\n  'use strict';\r\n\r\n  const tim = document.getElementById(\"tim\");\r\n  const mon = document.getElementById(\"mon\");\r\n  const ans = document.getElementById(\"ans\");\r\n  tim.style.display = \"none\";\r\n  mon.style.display = \"none\";\r\n  ans.style.display = \"none\";\r\n\r\n  document.querySelector('#btn').addEventListener('click', () => {\r\n\r\n    tim.style.display = \"block\";\r\n    mon.style.display = \"block\";\r\n    ans.style.display = \"none\";\r\n\r\n    //3000ms = 3s\r\n    const endTime = Date.now() + 3000;\r\n    // 5ms Interval\r\n    const timerId = setInterval(timer,5);\r\n    \r\n    function timer() {\r\n      const nowTime = Date.now();\r\n      const dif = endTime - nowTime;\r\n      const sec = dif / 1000;\r\n      tim.textContent = `${sec}`;\r\n\r\n      if (sec<0) {\r\n        clearInterval(timerId);\r\n        tim.style.display = \"none\";\r\n        mon.style.display = \"none\";\r\n        ans.style.display = \"block\";\r\n      }\r\n    }\r\n  });\r\n  \r\n\r\n  })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "３秒後に問題の解答を表示するサンプル①（setInterval、style.display）", category_id: 1},
  {content: "iframe内にデモを表示し、そのコードも表示します\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<style>\r\nbody {background: darkgray;}\r\n* {margin:2px}\r\n</style>\r\n<p>Demo</p>\r\n<iframe id=\"demo\" height=\"100px\"></iframe>\r\n<p>Code</p>\r\n<pre style=\"background-color:aliceblue\"><code id=\"hoge\" ></code></pre>\r\n\r\n<!-- コード部分 -->\r\n<script id=\"src\" type=\"text/plain\">\r\n  <!DOCTYPE html>\r\n  <head>\r\n  <style>\r\n  body {background: gray;}\r\n  .btn {  cursor: pointer;width: 100px;background: #3498db;}\r\n  </style>\r\n  </head>\r\n  <body>\r\n  <span id=\"btn\" class=\"btn\">Click</span>\r\n  <p id=\"res\"></p>\r\n\r\n  <script>\r\n   (function() {\r\n    'use strict';\r\n     document.querySelector('#btn').addEventListener('click', () => {\r\n       document.getElementById('res').textContent  = \"Hello!\";\r\n     });\r\n   })();\r\n</script> <!-- 終了タグ -->\r\n\r\n<!-- コード表示とiframe設定 -->\r\n<script>\r\n (function() {\r\n  'use strict';\r\n\r\n   var xxx = document.getElementById('src').textContent;\r\n   xxx += '<' + '/script'+ '>'+ '\\n';\r\n   xxx += '<' + '/body'  + '>'+ '\\n';\r\n   xxx += '<' + '/html'  + '>';\r\n   console.log(xxx);\r\n   document.getElementById('hoge').textContent = xxx;\r\n\r\n   var blob = new Blob([xxx], { type: 'text/html' });\r\n   document.getElementById('demo').src = URL.createObjectURL(blob);\r\n   })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "デモを表示し、そのコードも表示（iframe、Blob、createObjectURL）", category_id: 1},
  {content: "JSON形式のデータを扱います\r\n[1] JSON形式の文字列をJSONオブジェクトに変換して画面に表示します\r\n[2] JSONオブジェクトを文字列に変換して画面に表示します", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer;width: 100px;background: #3498db;}\r\n</style>\r\n</head>\r\n<body>\r\n<table> \r\n<tr>\r\n<td><p id=\"t1\"></p></td>\r\n<td><span id=\"btn1\" class=\"btn\">string -> JSON Object</span></td>\r\n<td><p id=\"res1\"></p></td>\r\n</tr>\r\n<tr>\r\n<td><p id=\"t2\"></p></td>\r\n<td><span id=\"btn2\" class=\"btn\">JSON Object -> string</span></td>\r\n<td><p id=\"res2\"></p></td>\r\n</tr>\r\n</table>\r\n<script>\r\n (function() {\r\n  'use strict';\r\n   var jsonString  = `{ \"id\": 1, \"name\": \"人見\", \"age\":18}`;\r\n   var jsonData    =  {  id : 2,  name : '今城',  age :20} ;\r\n   document.getElementById('t1').textContent  = jsonString;\r\n   document.getElementById('t2').textContent  = jsonData.id;\r\n   document.getElementById('t2').textContent += \" \" + jsonData.name;\r\n   document.getElementById('t2').textContent += \" \" + jsonData.age ;\r\n\r\n   document.querySelector('#btn1').addEventListener('click', () => {\r\n     const dat = JSON.parse(jsonString);\r\n     console.log(dat);\r\n     document.getElementById('res1').textContent  = dat.id;\r\n     document.getElementById('res1').textContent += \" \" + dat.name;\r\n     document.getElementById('res1').textContent += \" \" + dat.age;\r\n   });\r\n   document.querySelector('#btn2').addEventListener('click', () => {\r\n     const dat = JSON.stringify(jsonData);\r\n     console.log(dat);\r\n     document.getElementById('res2').textContent  = dat;\r\n   });\r\n })();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "JSON形式のデータを扱う（JSON.parse、JSON.stringify）", category_id: 1},
  {content: "非同期処理を３つ実行します\r\n各処理内で、setTimeoutを呼出し、\r\nそれぞれ時間を変えて処理してます\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer;width: 100px;background: #3498db;}\r\n#res {position: absolute; top:50px;}\r\nli { list-style: none; } \r\n</style>\r\n</head>\r\n<body>\r\n <span id=\"btn\" class=\"btn\">Click</span>\r\n <div id=\"res\"></div>\r\n <script>\r\n (function() {\r\n  'use strict';\r\n\r\n    function addMsg(xxx) {\r\n     let date   = new Date();\r\n     let locale = date.toLocaleTimeString();\r\n     document.getElementById('res').innerHTML += `<li>${locale}  ${xxx} </li>`;\r\n    }\r\n\r\n    document.querySelector('#btn').addEventListener('click', () => {\r\n      addMsg('Click');\r\n      addMsg('');\r\n      \r\n      //１つ目の処理\r\n      const promise1 = new Promise((resolve) => {\r\n       addMsg(\"1 Start\");\r\n       setTimeout(() => {\r\n         addMsg(\"1 End\");\r\n         resolve(\"1\");\r\n       } ,1000);\r\n      });\r\n      //２つ目の処理\r\n      const promise2 = new Promise((resolve) => {\r\n       addMsg(\"2 Start\");\r\n       setTimeout(() => {\r\n         addMsg(\"2 End\");\r\n         resolve(\"2\");\r\n       } ,4000);\r\n      });\r\n      //３つ目の処理\r\n      const promise3 = new Promise((resolve) => {\r\n       addMsg(\"3 Start\");\r\n       addMsg('');\r\n       setTimeout(() => {\r\n         addMsg(\"3 End\");\r\n         resolve(\"3\");\r\n       } ,8000);\r\n      });\r\n     \r\n      //複数の処理を実行\r\n      Promise.all([\r\n       promise1,\r\n       promise2,\r\n       promise3\r\n      ])\r\n      .then(function(xxx){\r\n        addMsg('');\r\n        addMsg(xxx);\r\n        addMsg('End!');\r\n      })\r\n    });\r\n\r\n   })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "非同期処理（promise）", category_id: 1},
  {content: "要素をクリックしてアニメーションさせたあと、\r\nアニメーションの完了を検知します\r\n※アニメーションはクラスの追加／削除で発生させます", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.con {\r\n  cursor: pointer;\r\n  height: 100px;\r\n  display: block;\r\n  position: absolute;\r\n  background: white;\r\n  width: 100px;\r\n  transition: all 5s;\r\n}\r\n.con.long {\r\n  width: 300px;\r\n}\r\n#res {position: absolute; top:120px;}\r\nli { list-style: none; } \r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"con\"></div>\r\n  <div id=\"res\"></div>\r\n <script>\r\n (function() {\r\n  'use strict';\r\n\r\n   function addMsg(xxx) {\r\n    let date   = new Date();\r\n    let locale = date.toLocaleTimeString();\r\n    document.getElementById('res').innerHTML += `<li>${locale}  ${xxx}.. </li>`;\r\n   }\r\n   document.querySelector('.con').addEventListener('transitionend', () => {\r\n    addMsg('transitionend');\r\n   });\r\n   document.querySelector('.con').addEventListener('click', () => {\r\n    addMsg('click!');\r\n    const el = document.querySelector('.con');\r\n    el.classList.toggle('long');\r\n    //以下でも同じ結果\r\n    //if (el.classList.contains('long') === true) {\r\n    //  el.classList.remove('long');\r\n    //} else {\r\n    //  el.classList.add('long');\r\n    //}\r\n    \r\n    \r\n   });\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "アニメーション完了を検知する（transitionend）", category_id: 1},
  {content: "div要素を複製して追加、および、削除します\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer; width: 100px; margin:7px; background: #3498db;}\r\n.c{\r\n  display: flex;\r\n  padding: 10px;\r\n  margin-top: 20px;\r\n}\r\n.con {\r\n  display: flex;\r\n  border: 2px dotted #fff;\r\n  padding: 10px;\r\n  margin-top: 20px;\r\n}\r\n.con div {\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n  display: flex;\r\n  border: 2px dotted #fff;\r\n  padding: 10px;\r\n}\r\n.box {\r\n  border: 4px solid #d03939 !important;\r\n  padding: 10px;\r\n}\r\nli { list-style: none; } \r\n</style>\r\n</head>\r\n<body>\r\n  <span id=\"btn1\" class=\"btn\">first</span>\r\n  <span id=\"btn2\" class=\"btn\">middle</span>\r\n  <span id=\"btn3\" class=\"btn\">Last</span>\r\n  <span id=\"btn4\" class=\"btn\">Remove</span>\r\n  <div class=\"c\">\r\n    <div class=\"box\">Box</div>\r\n  </div>\r\n  <div class=\"con\">\r\n    <div id=\"t1\">要素1</div>\r\n    <div id=\"t2\">要素2</div>\r\n  </div>\r\n  <p id=\"res\"></p>\r\n\r\n <script>\r\n (function() {\r\n  'use strict';\r\n   const t1  = document.getElementById('t1');\r\n   const t2  = document.getElementById('t2');\r\n   const con = document.querySelector('.con');\r\n   const box = document.querySelector('.box');\r\n\r\n   const clone1 = box.cloneNode(true);\r\n   const clone2 = box.cloneNode(true);\r\n   const clone3 = box.cloneNode(true);\r\n\r\n   function addMsg(xxx) {\r\n    let date   = new Date();\r\n    let locale = date.toLocaleTimeString();\r\n    document.getElementById('res').innerHTML += `<li>${locale}  add ${xxx}.. </li>`;\r\n   }\r\n\r\n   document.getElementById('btn1').addEventListener('click', function() {\r\n    //先頭に追加\r\n    con.insertBefore(clone1 , con.firstElementChild);\r\n    addMsg('first');\r\n   });\r\n   document.getElementById('btn2').addEventListener('click', function() {\r\n    //指定要素の前に追加\r\n    con.insertBefore(clone2 , t2);\r\n    addMsg('middle');\r\n   });\r\n   document.getElementById('btn3').addEventListener('click', function() {\r\n    //末尾に追加\r\n    con.appendChild(clone3);\r\n    addMsg('last');\r\n   });\r\n   document.getElementById('btn4').addEventListener('click', function() {\r\n    //追加した要素を全削除\r\n     const nodeList = document.querySelectorAll('.con > .box');\r\n     nodeList.forEach((el) => {el.remove();});\r\n     document.getElementById('res').innerHTML = '';\r\n   });\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "要素の複製、追加、削除 (cloneNode、insertBefore、appendChild、remove)", category_id: 1},
  {content: "数値の配列は加算\r\n文字列の２次元配列は１次元配列（フラット化）にして表示\r\n（reduceRightボタンでは、逆順で表示されるように処理してます）\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer;width: 100px;background: #3498db;}\r\nli { list-style: none; } \r\nspan {margin:10px;}\r\n</style>\r\n</head>\r\n<body>\r\n<table>\r\n<tr>\r\n<th>Target</th><th>Button</th><th>Result</th>\r\n</tr>\r\n<tr>\r\n<td><div id=\"t1\"></div></td><td>\r\n<span id=\"btn1\" class=\"btn\">sum</span>\r\n<td><p id=\"res1\">xxxxxxxxxx</p></td>\r\n</tr>\r\n<tr>\r\n<td><div id=\"t2\"></div></td><td>\r\n<span id=\"btn2\" class=\"btn\">reduceRight</span>\r\n</td><td><p id=\"res2\">xxxxxxxxxx</p></td>\r\n</tr>\r\n</table>\r\n\r\n<script>\r\n (function() {\r\n  'use strict';\r\n\r\n  //number(数値の配列)\r\n   const numList = [\r\n     1,\r\n     2,\r\n     3\r\n   ];\r\n\r\n  //string(文字列の２次元配列)\r\n   const userDataList = [\r\n     [\r\n     'Make','Davis'\r\n     ]\r\n     ,\r\n     [\r\n     'Tom'\r\n     ]\r\n   ];\r\n\r\n  //display(number array)\r\n   document.getElementById('t1').innerHTML = '';\r\n   for (const ddd of numList) {\r\n     document.getElementById('t1').innerHTML += `<li>${ddd}</li>`;\r\n   }\r\n  //display(string array)\r\n  function updList(xxx) {\r\n     let newArray;\r\n     \r\n     if (xxx === 'res2') {\r\n       newArray= userDataList.reduceRight((a,b) => {return a.concat(b)});\r\n     } else {\r\n       newArray= userDataList.reduce((a,b) => {return a.concat(b)});\r\n     }\r\n     document.getElementById(xxx).innerHTML= '';\r\n     for (const ddd of newArray) {\r\n       document.getElementById(xxx).innerHTML += `<li>${ddd}</li>`;\r\n     }\r\n   }\r\n   updList('t2');\r\n   \r\n   // click [sum]\r\n   document.getElementById('btn1').addEventListener('click', function() {\r\n     const sum = numList.reduce((a,b) => {return a+b});\r\n     document.getElementById('res1').innerText = sum;\r\n   });\r\n\r\n   // click [reduceRight]\r\n   document.getElementById('btn2').addEventListener('click', function() {\r\n     updList('res2');\r\n   });\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "配列から各要素を処理（reduce,reduceRight）", category_id: 1},
  {content: "NodeListを変換して配列のメソッドを使います\r\n（該当するclass名をもつ要素のカスタム属性（data-*）の値を表示）\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n</style>\r\n</head>\r\n<body>\r\n  <ol>\r\n    <li class=\"a\" data-val=\"a-1\"></li>\r\n    <li class=\"a\" data-val=\"a-2\"></li>\r\n    <li class=\"b\" data-val=\"b-1\"></li>\r\n    <li class=\"b\" data-val=\"b-2\"></li>\r\n    <li class=\"c\" data-val=\"c-1\"></li>\r\n    <li class=\"c\" data-val=\"c-2\"></li>\r\n  </ol>\r\n  \r\n  <label for=\"x\">please input (a/b/c) <input id=\"x\" value=\"\"></label>\r\n  <p id=\"res\"></p>\r\n\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n    \r\n    //NodeList\r\n    const liList = document.querySelectorAll('li');\r\n    console.log(liList.length);\r\n\r\n    //配列に変換（NodeList -> Array）\r\n    const liArray = [...liList];\r\n    console.log(liArray.length);\r\n    \r\n    document.getElementById('x').addEventListener(\"keyup\", function() {\r\n    \r\n    const x = document.getElementById('x').value;\r\n    console.log(x);\r\n    const newArray = liArray.filter((xxx) => xxx.classList.contains(x));\r\n    console.log(newArray.length);\r\n    if (newArray.length == 0) {\r\n      document.getElementById('res').innerHTML = '';\r\n      return;\r\n    }\r\n    console.log(newArray);\r\n    console.log(newArray[0]);\r\n    console.log(newArray[1]);\r\n    \r\n    document.getElementById('res').innerHTML = `${newArray[0].dataset.val} <br> ${newArray[1].dataset.val}`;\r\n    \r\n    });\r\n\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "スプレッド演算子(...)を使って配列に変換（NodeList -> Array）", category_id: 1},
  {content: "チェックボックスにチェックした場合\r\nリンクボタンのリンク無効にします", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n</style>\r\n</head>\r\n<body>\r\n  <input id=\"chk\"type=\"checkbox\">チェックすると,リンク無効\r\n  <p><a href='https://www.google.co.jp/' id='hoge' >Google先生</p>\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n     \r\n     function onLink() {\r\n       console.log(event);\r\n       event.preventDefault();\r\n     }\r\n     //以下でも同じ結果\r\n     //function onLink(xxx) {\r\n     //  console.log(xxx);\r\n     //  xxx.preventDefault();\r\n     //}\r\n\r\n     //チェックボックス\r\n     document.getElementById('chk').addEventListener('click', (event) => {\r\n       if (event.target.checked === true) {\r\n          console.log('on');\r\n          document.getElementById('hoge').addEventListener('click', onLink);\r\n       } else {\r\n          console.log('off');\r\n          document.getElementById('hoge').removeEventListener('click',onLink);\r\n       }\r\n     });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "デフォルトイベント無効（preventDefault）", category_id: 1},
  {content: "画面サイズが\r\nブレークポイントを超えたら\r\nレイアウト変更\r\n（レスポンシブ対応..の練習）", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#nav {  opacity: .2;}\r\n.rectangle {\r\n  width:150px;\r\n  display:inline-block;\r\n  --recSta: hsl(0, 100%, 50%);\r\n  --recEnd: hsl(322, 100%, 50%);\r\n  background-image: linear-gradient(-135deg, var(--recSta), var(--recEnd));\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <span id=\"a1\" class=\"rectangle\">1</span>\r\n  <span id=\"a2\" class=\"rectangle\">2</span>\r\n  <p id=\"nav\"></p>\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n     const a1  = document.getElementById('a1');\r\n     const a2  = document.getElementById('a2');\r\n     const nav = document.getElementById('nav');\r\n\r\n     //リサイズ\r\n     window.onresize = function () {\r\n       nav.innerHTML = window.innerWidth;\r\n     };\r\n\r\n    // メディアクエリ\r\n    const mediaQueryList = matchMedia('(min-width: 480px)');\r\n    mediaQueryList.addListener(onMediaQueryChange);\r\n    function onMediaQueryChange(mediaQueryList) {\r\n      if (mediaQueryList.matches === true) {\r\n        a2.style.visibility = \"visible\";\r\n      } else {\r\n        a2.style.visibility = \"hidden\";\r\n      }\r\n    }\r\n   onMediaQueryChange(mediaQueryList);\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "画面レイアウト（matchMedia）", category_id: 1},
  {content: "非同期でイベントを発火\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody  {background: gray;}\r\n#msg  {width: 200px; height: 200px;background: #3498db;}\r\n#stop {cursor: pointer;width: 100px; background: white;}\r\n</style>\r\n</head>\r\n<body>\r\n<div id=\"msg\"></div>\r\n<div id=\"stop\">STOP</div>\r\n<script>\r\n (function() {\r\n  'use strict';\r\n   const msgList = [\r\n     'あれ？',\r\n     '声が',\r\n     '遅れて聞こえるよ'\r\n   ];\r\n   \r\n   const msg  = document.getElementById('msg');\r\n   const stop = document.getElementById('stop');\r\n   var i = 0;\r\n   var timerId;\r\n\r\n   msg.addEventListener('click', () => {\r\n     if (i >= msgList.length) {\r\n         i = 0;\r\n         msg.innerHTML= '';\r\n         return;\r\n     }\r\n     msg.innerHTML += msgList[i] + '<br>';\r\n     i ++;\r\n   });\r\n   //setTimeout内に再帰処理（自分自身を呼出）\r\n   function updMsg() {\r\n     timerId = setTimeout(() => {\r\n       msg.dispatchEvent(new Event('click'));\r\n       //以下でも同じ結果\r\n       //msg.click();\r\n       updMsg();\r\n     }, 1000);\r\n   }\r\n   updMsg();\r\n\r\n   //STOPしたいとき\r\n   stop.addEventListener('click', () => {\r\n     msg.innerHTML += 'STOPしました'+ '<br>';\r\n     clearTimeout(timerId);\r\n   });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "非同期処理（dispatchEvent・setTimeout）", category_id: 1},
  {content: "ソート\r\n【参考】\r\n・ソート（sort）について\r\n比較関数にしたがってソート\r\n→比較関数とは、２つの要素（a,b）の大小によって順番を決める\r\n   a - b > 0 の場合 →  b,aの順にソート\r\n   a - b < 0 の場合 →  a,bの順にソート\r\n   a - b = 0 の場合 → 順番変えない\r\n\r\n・昇順（ascending order）\r\n小さいものから大きいものの順に並べること\r\n（山を登るイメージで覚える）\r\n※降順（descending order）はその逆\r\n\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n.btn {  cursor: pointer;width: 100px;background: #3498db;}\r\nli { list-style: none; } \r\nspan {margin:10px;}\r\n</style>\r\n</head>\r\n<body>\r\n<table>\r\n<tr>\r\n<th>Target</th><th>Button</th><th>Result</th>\r\n</tr>\r\n<tr>\r\n<td><div id=\"t1\">3,2,4,3,1,5</div></td><td>\r\n<span id=\"btn1\" class=\"btn\">Asc</span>\r\n<span id=\"btn2\" class=\"btn\">Desc</span></td>\r\n<td><p id=\"res1\">xxxxxxxxxx</p></td>\r\n</tr>\r\n<tr>\r\n<td><div id=\"t2\"></div></td><td>\r\n<span id=\"btn3\" class=\"btn\">Asc</span>\r\n<span id=\"btn4\" class=\"btn\">Desc</span>\r\n</td><td><p id=\"res2\">xxxxxxxxxx</p></td>\r\n</tr>\r\n</table>\r\n\r\n<script>\r\n (function() {\r\n  'use strict';\r\n   const userDataList = [\r\n     { id: 12, name: '人見' },\r\n     { id: 13, name: '今城' },\r\n     { id: 11, name: '三田' },\r\n     { id: 15, name: '依田' },\r\n     { id: 14, name: '伊敷' }\r\n   ];\r\n  //表示用\r\n  function updList(xxx) {\r\n    let listHTML = '';\r\n    for (const data of userDataList) {\r\n      listHTML += `<li>${data.id} : ${data.name}</li>`;\r\n    }\r\n   document.getElementById(xxx).innerHTML= listHTML;\r\n   }\r\n   updList('t2');\r\n\r\n   var t1   = document.getElementById('t1').innerText.split(',');\r\n   console.log(t1);\r\n   //昇順【配列】\r\n   document.getElementById('btn1').addEventListener('click', function() {\r\n     t1.sort((a,b) =>{\r\n       if (a  >  b) {return  1;}\r\n       if (a === b) {return  0;}\r\n       if (a  <  b) {return -1;}\r\n     });\r\n     document.getElementById('res1').innerText = t1;\r\n   });\r\n   //降順【配列】\r\n   document.getElementById('btn2').addEventListener('click', function() {\r\n     t1.sort((a,b) =>{\r\n        return  b - a ;\r\n     //違う記述ですが結果同じ\r\n     //  if (a  >  b) {return -1;}\r\n     //  if (a === b) {return  0;}\r\n     //  if (a  <  b) {return  1;}\r\n     });\r\n     document.getElementById('res1').innerText = t1;\r\n   });\r\n\r\n   //昇順【オブジェクト配列】\r\n   document.getElementById('btn3').addEventListener('click', function() {\r\n     userDataList.sort((a,b) =>{\r\n       //return a.id  -  b.id;\r\n       //違う記述ですが結果同じ\r\n      if (a.id  >  b.id) {return  1;}\r\n      if (a.id === b.id) {return  0;}\r\n      if (a.id  <  b.id) {return -1;}\r\n     });\r\n     console.log(userDataList);\r\n     updList('res2');\r\n   });\r\n   //降順【オブジェクト配列】\r\n   document.getElementById('btn4').addEventListener('click', function() {\r\n     userDataList.sort((a,b) =>{\r\n        return b.id  -  a.id;\r\n     });\r\n     console.log(userDataList);\r\n     updList('res2');\r\n   });\r\n\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "ソート（配列.sort）", category_id: 1},
  {content: "入力した値に\r\n一致した配列があれば表示する\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#search-word-input:focus {background: yellow;}\r\np.ok {background: powderblue;}\r\n</style>\r\n</head>\r\n<body>\r\n<header>\r\n  <label>ID(2桁)を入力してね\r\n  <input id=\"search-word-input\" maxlength=\"2\" type=\"text\">\r\n  </label>\r\n</header>\r\n<body>\r\n  <p id=\"search-result\"></p>\r\n</body>\r\n<script>\r\n(function() {\r\n 'use strict';\r\n  const userDataList = [\r\n    { id: 11, name: '三田' },\r\n    { id: 12, name: '人見' },\r\n    { id: 13, name: '今城' },\r\n    { id: 14, name: '伊敷' },\r\n    { id: 15, name: '依田' }\r\n  ];\r\n  const searchWordText = document.querySelector('#search-word-input');\r\n  const searchResult   = document.querySelector('#search-result');\r\n  searchWordText.select();\r\n\r\n  function findUser(searchId) {\r\n    console.log(searchId);\r\n    if (!searchId || searchId === '') {\r\n      searchResult.classList.remove('ok');\r\n      searchResult.textContent = '';\r\n      return;\r\n    }\r\n\r\n    //条件を満たす最初の要素を取得\r\n    const targetData = userDataList.find((xxx) => xxx.id === searchId);\r\n    //※以下と同様\r\n    // const targetData = userDataList.find(xxx => {\r\n    //   return xxx.id === searchId\r\n    // });\r\n    \r\n    if (targetData == null) {\r\n      console.log('×');\r\n      searchResult.classList.remove('ok');\r\n      searchResult.textContent = 'Nothing..';\r\n      return;\r\n     }\r\n    console.log('○');\r\n    searchResult.classList.add('ok');\r\n    searchResult.textContent = targetData.name;\r\n  }\r\n\r\n  searchWordText.addEventListener('keyup', () => {\r\n     const searchId = Number(event.target.value);\r\n     findUser(searchId);\r\n  });\r\n})();\r\n</script>\r\n</body>\r\n</html>\r\n", title: "検索（配列.find）", category_id: 1},
  {content: "１文字入力し、\r\n該当する名前を表示\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#name-list {\r\n  display: grid;\r\n  height: 100%;\r\n  gap: 5px;\r\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\r\n  grid-auto-rows: 20px;\r\n  align-content: center;\r\n  padding: 2px;\r\n  overflow-y: scroll;\r\n}\r\n#name-list button {\r\n  background-color: powderblue;\r\n}\r\n#name-list button.hide {\r\n  display: none;\r\n}\r\n#search-word-input:focus {\r\n  background: yellow;\r\n}\r\n\r\n</style>\r\n</head>\r\n<body>\r\n<header>\r\n  <label>最初の一文字（漢字orふりがな）入力してね\r\n  <input id=\"search-word-input\" maxlength=\"1\" type=\"text\">\r\n  </label>\r\n</header>\r\n<div id=\"name-list\">\r\n  <button data-kanj=\"三宅\" data-furi=\"みやけ\">三宅</button>\r\n  <button data-kanj=\"三川\" data-furi=\"みかわ\">三川</button>\r\n  <button data-kanj=\"三田\" data-furi=\"さんだ\">三田</button>\r\n  <button data-kanj=\"人見\" data-furi=\"ひとみ\">人見</button>\r\n  <button data-kanj=\"今城\" data-furi=\"いまじょう\">今城</button>\r\n  <button data-kanj=\"伊敷\" data-furi=\"いしき\">伊敷</button>\r\n  <button data-kanj=\"依田\" data-furi=\"よだ\">依田</button>\r\n  <button data-kanj=\"入田\" data-furi=\"いりた\">入田</button>\r\n  <button data-kanj=\"兼子\" data-furi=\"かねこ\">兼子</button>\r\n  <button data-kanj=\"只野\" data-furi=\"ただの\">只野</button>\r\n  <button data-kanj=\"周防\" data-furi=\"すおう\">周防</button>\r\n  <button data-kanj=\"岡林\" data-furi=\"おかばやし\">岡林</button>\r\n  <button data-kanj=\"岩倉\" data-furi=\"いわくら\">岩倉</button>\r\n  <button data-kanj=\"川隅\" data-furi=\"かわすみ\">川隅</button>\r\n  <button data-kanj=\"広中\" data-furi=\"ひろなか\">広中</button>\r\n  <button data-kanj=\"有岡\" data-furi=\"ありおか\">有岡</button>\r\n  <button data-kanj=\"木谷\" data-furi=\"きだに\">木谷</button>\r\n  <button data-kanj=\"松口\" data-furi=\"まつぐち\">松口</button>\r\n  <button data-kanj=\"松竹\" data-furi=\"まつたけ\">松竹</button>\r\n  <button data-kanj=\"河内\" data-furi=\"かわうち\">河内</button>\r\n</div>\r\n\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n\r\n     const searchWordText = document.querySelector('#search-word-input');\r\n     const nameList = document.querySelectorAll('#name-list button');\r\n     \r\n     searchWordText.select();\r\n\r\n     searchWordText.addEventListener('keyup', () => {\r\n\r\n       const searchWord = searchWordText.value;\r\n       nameList.forEach((element) => {\r\n         // 検索語なければ、全て表示\r\n         if (!searchWord || searchWord === '') {\r\n           element.classList.remove('hide');\r\n           return;\r\n         }\r\n         \r\n         console.log(searchWord);\r\n\r\n         const kanj = element.dataset.kanj;       // 漢字\r\n         const furi = element.dataset.furi;       // ふりがな\r\n         if (\r\n           searchWord.charAt() === kanj.charAt() ||\r\n           searchWord.charAt() === furi.charAt()\r\n         ) {\r\n           // 一致する場合、「hide」クラスを除去\r\n           element.classList.remove('hide');\r\n         } else {\r\n           // 一致しない場合、「hide」クラスを追加\r\n           element.classList.add('hide');\r\n         }\r\n       });\r\n    });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "検索（最初の１文字）", category_id: 1},
  {content: "三角関数を使って\r\n円を回転させます\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#nav {  opacity: .2;}\r\n.character {\r\n  cursor: pointer;\r\n  width: 50px;\r\n  height: 50px;\r\n  background-color:Yellow;\r\n  border-radius: 30px;\r\n  position: absolute;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"character\"></div>\r\n  <p id=\"nav\"></p>\r\n\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n\r\n    /** 角度 */\r\n    let degree = 180;\r\n    const rec = document.querySelector('.character');\r\n    const nav = document.getElementById('nav');\r\n\r\n    function loop() {\r\n      // ラジアン = (角度 * π ) / 180\r\n      const rotation = (degree * Math.PI) / 180;\r\n      // 位置\r\n      const targetX = window.innerWidth / 2 + 100 * Math.cos(rotation) - 50;\r\n      const targetY = window.innerHeight / 2 + 100 * Math.sin(rotation) - 50;\r\n      rec.style.top  = `${targetY}px`;\r\n      rec.style.left = `${targetX}px`;\r\n      nav.innerHTML =  \"deg:\" + degree + \"<br>\" + \"top:\" + rec.style.top + \"<br>\" + \"left:\"+ rec.style.left ;\r\n      // 角度\r\n      degree += 1;\r\n      // 次の画面更新タイミングでloop()\r\n      requestAnimationFrame(loop);\r\n     }\r\n     \r\n     loop();\r\n   \r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "円を回転させる", category_id: 1},
  {content: "クリックするたびに\r\nグラデーション色を変更\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#nav {  opacity: .2;}\r\nmain { width: 100%; max-width: 200px; height: 200px;}\r\n.rectangle {\r\n  cursor: pointer;\r\n  width: 100%;\r\n  height: calc(100% - 50px);\r\n  --recSta: hsl(0, 100%, 50%);\r\n  --recEnd: hsl(322, 100%, 50%);\r\n  background-image: linear-gradient(-135deg, var(--recSta), var(--recEnd));\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <main>\r\n  <div class=\"rectangle\"></div>\r\n  <p id=\"nav\"></p>\r\n  </main>\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n     const rec = document.querySelector('.rectangle');\r\n     const nav = document.getElementById('nav');\r\n\r\n     rec.addEventListener('click', function() {\r\n       const randomHue = Math.trunc(Math.random() * 360);\r\n       const randomColorStart = `hsl(${randomHue}, 100%, 50%)`;\r\n       const randomColorEnd = `hsl(${randomHue + 50}, 100%, 50%)`;\r\n       nav.innerHTML = randomColorStart + \"<br>\" + randomColorEnd;\r\n       //変更\r\n       rec.style.setProperty('--recSta', randomColorStart);\r\n       rec.style.setProperty('--recEnd', randomColorEnd);\r\n    });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "ランダム値でグラデーション色を変更", category_id: 1},
  {content: "ユーザがどんな環境から\r\nアクセスしてるか判定", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#chk {  cursor: pointer;width: 100px;background: #3498db;}\r\n#nav {  opacity: .2;}\r\n</style>\r\n</head>\r\n<body>\r\n  <label>判定:</label><input id=\"a1\" value=\"iPhone\"><input id=\"a2\" value=\"Windows\"><br>\r\n  <label>結果:</label><input id=\"b1\" value=\"\"><input id=\"b2\" value=\"\">\r\n  <div id=\"chk\">check</div>\r\n  <p id=\"nav\"></p>\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n    var a1   = document.getElementById('a1');\r\n    var a2   = document.getElementById('a2');\r\n    var b1   = document.getElementById('b1');\r\n    var b2   = document.getElementById('b2');\r\n    var chk  = document.getElementById('chk');\r\n    var nav  = document.getElementById('nav');\r\n\r\n    chk.addEventListener('click', function() {\r\n      const tmp = navigator.userAgent\r\n      nav.innerHTML = tmp;\r\n\r\n      b1.value = tmp.includes(a1.value)\r\n      b2.value = tmp.includes(a2.value)\r\n    });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "ユーザーエージェント判定", category_id: 1},
  {content: "率を未入力した場合は\r\nあらかじめ設定した値で計算\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {background: gray;}\r\n#calc {  cursor: pointer;width: 100px;background: #3498db;}\r\n</style>\r\n</head>\r\n<body>\r\n  <label for=\"kin\">額:</label><input id=\"kin\" value=\"100\"><br>\r\n  <label for=\"tax\">率:</label><input id=\"tax\" value=\"\">※省略時は0.08<br>\r\n  <label for=\"ans\">税:</label><input id=\"ans\" value=\"\"><br>\r\n  <div id=\"calc\">calc</div>\r\n  <script>\r\n  (function() {\r\n    'use strict';\r\n    var kin  = document.getElementById('kin');\r\n    var tax  = document.getElementById('tax');\r\n    var ans  = document.getElementById('ans');\r\n    var calc = document.getElementById('calc');\r\n    //引数省略可能\r\n    function cal(kin , tax=0.08) {\r\n      console.log(kin);\r\n      console.log(tax);\r\n      ans.value = kin * tax;\r\n    }\r\n    //正規表現による数値チェック\r\n    function isNumber(val){\r\n      var regex = new RegExp(/^[-+]?[0-9]+(\\.[0-9]+)?$/);\r\n      return regex.test(val);\r\n    }\r\n    //クリックイベント\r\n    calc.addEventListener('click', function() {\r\n      console.log(kin.value);\r\n      console.log(tax.value);\r\n      if (isNumber(tax.value)) {\r\n         cal(kin.value , tax.value);\r\n      } else {\r\n         cal(kin.value);\r\n      }\r\n    });\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "引数省略（初期値の設定）", category_id: 1},
  {content: "ボタンクリックすると\r\nランダム値を表示\r\n", user_id: 1, code: "<!DOCTYPE html>\r\n<head>\r\n<style>\r\nbody {\r\n  background: gray;\r\n}\r\n#spin {\r\n  cursor: pointer;\r\n  width: 100px;\r\n  background: #3498db;\r\n  border-radius: 17px;\r\n  color: #fff;\r\n  text-align: center;\r\n}\r\n</style>\r\n</head>\r\n<body>\r\n  <div class=\"pan\"><input value=\"1\"></div>\r\n  <div class=\"pan\"><input value=\"2\"></div>\r\n  <div class=\"pan\"><input value=\"3\"></div>\r\n  <div class=\"pan\"><input value=\"4\"></div>\r\n  <div class=\"pan\"><input value=\"5\"></div>\r\n  <div id=\"spin\";  border=\"5px\">start</div>\r\n  <script>\r\n  (function() {\r\n\t'use strict';\r\n\tvar pans = document.getElementsByClassName('pan');\r\n\tvar spin = document.getElementById('spin');\r\n\tfunction runSlot(n) {\r\n\t  setTimeout(function() {\r\n\t    pans[n].children[0].value = 1 + Math.floor(Math.random()*5);\r\n\t    runSlot(n);\t\r\n\t  },50);\r\n\t}\r\n\tspin.addEventListener('click', function() {\r\n\tvar i;\r\n\tfor(i=0; i< pans.length; i++){\r\n\t  runSlot(i);\r\n\t}\r\n\t});\r\n  })();\r\n  </script>\r\n</body>\r\n</html>\r\n", title: "ランダム値", category_id: 1}
])
User.create!([
  {name: "aaa", email: "aaa@yahoo.co.jp", password_digest: "$2a$10$hJ4e.70zupqDBZzGv4CB6OGwN/LHWsAsRu/nJREVZ68zOhSmVfafq", remember_digest: nil, activation_digest: "$2a$10$55Vbnr8D0D/aJFBws0fRR.zN4HmgfNkWidTqBQEpULGhk23KUXppu", activated: false, activated_at: nil, admin: false}
])
